diff --git a/node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js b/node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js
index 73dc996..8166cf5 100644
--- a/node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js
+++ b/node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js
@@ -35,7 +35,8 @@ var ALLOWED_VALUES_TRUST = [
     undefined,
     'TRUST_ALL_CERTIFICATES',
     'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES',
-    'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'
+    'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES',
+    'TRUST_SERVER_CLIENT_CERTIFICATES'
 ];
 var ChannelConfig = /** @class */ (function () {
     /**
@@ -52,6 +53,9 @@ var ChannelConfig = /** @class */ (function () {
         this.knownHostsPath = extractKnownHostsPath(driverConfig);
         this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE;
         this.connectionTimeout = extractConnectionTimeout(driverConfig);
+        this.cert = driverConfig.cert;
+        this.key = driverConfig.key;
+        this.passphrase = driverConfig.passphrase;
     }
     return ChannelConfig;
 }());
diff --git a/node_modules/neo4j-driver-bolt-connection/lib/channel/node/node-channel.js b/node_modules/neo4j-driver-bolt-connection/lib/channel/node/node-channel.js
index 5775b37..920cb62 100644
--- a/node_modules/neo4j-driver-bolt-connection/lib/channel/node/node-channel.js
+++ b/node_modules/neo4j-driver-bolt-connection/lib/channel/node/node-channel.js
@@ -104,7 +104,65 @@ var TrustStrategy = {
         });
         socket.on('error', onFailure);
         return configureSocket(socket);
-    }
+    },
+    TRUST_SERVER_CLIENT_CERTIFICATES: function (config, onSuccess, onFailure) {
+        if (!config.trustedCertificates ||
+            config.trustedCertificates.length === 0) {
+            onFailure((0, neo4j_driver_core_1.newError)('You are using TRUST_CUSTOM_CA_SIGNED_CERTIFICATES as the method ' +
+                'to verify trust for encrypted  connections, but have not configured any ' +
+                'trustedCertificates. You  must specify the path to at least one trusted ' +
+                'X.509 certificate for this to work. Two other alternatives is to use ' +
+                'TRUST_ALL_CERTIFICATES or to disable encryption by setting encrypted="' +
+                ENCRYPTION_OFF +
+                '"' +
+                'in your driver configuration.'));
+            return;
+        }
+        else if (!config.key) {
+            onFailure((0, neo4j_driver_core_1.newError)('You are using TRUST_SERVER_CLIENT_CERTIFICATES as the method ' +
+                'to verify trust for encrypted  connections, but have not configured any' +
+                'key. You  must specify the path to the key for this to work. Two other alternatives is to use ' +
+                'TRUST_ALL_CERTIFICATES or to disable encryption by setting encrypted="' +
+                ENCRYPTION_OFF +
+                '"' +
+                'in your driver configuration.'));
+            return;
+        }
+        else if (!config.cert) {
+            onFailure((0, neo4j_driver_core_1.newError)('You are using TRUST_SERVER_CLIENT_CERTIFICATES as the method ' +
+                'to verify trust for encrypted  connections, but have not configured any ' +
+                'client certificates. You  must specify the path to the client certificate for this to work. Two other alternatives is to use ' +
+                'TRUST_ALL_CERTIFICATES or to disable encryption by setting encrypted="' +
+                ENCRYPTION_OFF +
+                '"' +
+                'in your driver configuration.'));
+            return;
+        }
+        var tlsOpts = Object.assign({}, newTlsOptions(config.address.host()), {
+            ca: config.trustedCertificates.map(function (f) { return fs_1.default.readFileSync(f); }),
+            key: fs_1.default.readFileSync(config.key),
+            cert: fs_1.default.readFileSync(config.cert),
+            passphrase: config.passphrase
+        });
+        var socket = tls_1.default.connect(config.address.port(), config.address.resolvedHost(), tlsOpts, function () {
+            if (!socket.authorized) {
+                onFailure((0, neo4j_driver_core_1.newError)('Server certificate is not trusted. If you trust the database you are connecting to, add' +
+                    ' the signing certificate, or the server certificate, to the list of certificates trusted by this driver' +
+                    " using `neo4j.v1.driver(.., { trustedCertificates:['path/to/certificate.crt']}). This " +
+                    ' is a security measure to protect against man-in-the-middle attacks. If you are just trying ' +
+                    ' Neo4j out and are not concerned about encryption, simply disable it using `encrypted="' +
+                    ENCRYPTION_OFF +
+                    '"`' +
+                    ' in the driver options. Socket responded with: ' +
+                    socket.authorizationError));
+            }
+            else {
+                onSuccess();
+            }
+        });
+        socket.on('error', onFailure);
+        return configureSocket(socket);
+    },
 };
 /**
  * Connect using node socket.
